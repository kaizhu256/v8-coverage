{
 "test_coverage_merge_is_block_coverage_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 10,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Identity preserves 'isBlockCoverage: true'",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": false,
        "ranges": [
         {
          "count": 10,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Identity preserves 'isBlockCoverage: false'",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": false,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a flat block-coverage (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 40,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge two non-block coverages and a block-coverage with a child (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage and two flat block-coverages (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 70,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 60,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 24,
          "endOffset": 6,
          "startOffset": 2
         },
         {
          "count": 6,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 42,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverages and two block-coverages with children (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 50,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "count": 40,
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage with a flat block-coverage with count (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 50,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "count": 40,
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Merge a non-block coverage with a flat block-coverage with count (permutation 1)",
   "status": "run"
  }
 ],
 "test_coverage_merge_issue_2_mixed_is_block_coverage_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 23,
        "functionName": "realpathSync",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 42951,
          "startOffset": 39013
         },
         {
          "count": 15,
          "endOffset": 39088,
          "startOffset": 39069
         },
         {
          "count": 5,
          "endOffset": 39140,
          "startOffset": 39088
         },
         {
          "count": 0,
          "endOffset": 39214,
          "startOffset": 39196
         },
         {
          "count": 5,
          "endOffset": 39356,
          "startOffset": 39341
         },
         {
          "count": 1,
          "endOffset": 39418,
          "startOffset": 39383
         },
         {
          "count": 19,
          "endOffset": 39991,
          "startOffset": 39418
         },
         {
          "count": 0,
          "endOffset": 40010,
          "startOffset": 39991
         },
         {
          "count": 0,
          "endOffset": 40187,
          "startOffset": 40012
         },
         {
          "count": 19,
          "endOffset": 40324,
          "startOffset": 40187
         },
         {
          "count": 427,
          "endOffset": 42868,
          "startOffset": 40324
         },
         {
          "count": 34,
          "endOffset": 40551,
          "startOffset": 40436
         },
         {
          "count": 393,
          "endOffset": 40677,
          "startOffset": 40551
         },
         {
          "count": 187,
          "endOffset": 40798,
          "startOffset": 40760
         },
         {
          "count": 28,
          "endOffset": 40797,
          "startOffset": 40770
         },
         {
          "count": 257,
          "endOffset": 40937,
          "startOffset": 40800
         },
         {
          "count": 0,
          "endOffset": 40915,
          "startOffset": 40891
         },
         {
          "count": 170,
          "endOffset": 40999,
          "startOffset": 40937
         },
         {
          "count": 11,
          "endOffset": 41017,
          "startOffset": 40999
         },
         {
          "count": 0,
          "endOffset": 41097,
          "startOffset": 41048
         },
         {
          "count": 170,
          "endOffset": 42382,
          "startOffset": 41097
         },
         {
          "count": 135,
          "endOffset": 41551,
          "startOffset": 41450
         },
         {
          "count": 11,
          "endOffset": 41525,
          "startOffset": 41503
         },
         {
          "count": 35,
          "endOffset": 41964,
          "startOffset": 41551
         },
         {
          "count": 13,
          "endOffset": 41924,
          "startOffset": 41875
         },
         {
          "count": 22,
          "endOffset": 42214,
          "startOffset": 41964
         },
         {
          "count": 34,
          "endOffset": 42296,
          "startOffset": 42214
         },
         {
          "count": 0,
          "endOffset": 42326,
          "startOffset": 42296
         },
         {
          "count": 34,
          "endOffset": 42376,
          "startOffset": 42326
         },
         {
          "count": 34,
          "endOffset": 42658,
          "startOffset": 42382
         },
         {
          "count": 0,
          "endOffset": 42677,
          "startOffset": 42658
         },
         {
          "count": 0,
          "endOffset": 42864,
          "startOffset": 42679
         },
         {
          "count": 18,
          "endOffset": 42883,
          "startOffset": 42868
         },
         {
          "count": 4,
          "endOffset": 42906,
          "startOffset": 42883
         },
         {
          "count": 18,
          "endOffset": 42950,
          "startOffset": 42906
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "fs.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "realpathSync",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 42951,
           "startOffset": 39013
          },
          {
           "count": 15,
           "endOffset": 39088,
           "startOffset": 39069
          },
          {
           "count": 5,
           "endOffset": 39140,
           "startOffset": 39088
          },
          {
           "count": 0,
           "endOffset": 39214,
           "startOffset": 39196
          },
          {
           "count": 5,
           "endOffset": 39356,
           "startOffset": 39341
          },
          {
           "count": 1,
           "endOffset": 39418,
           "startOffset": 39383
          },
          {
           "count": 19,
           "endOffset": 39991,
           "startOffset": 39418
          },
          {
           "count": 0,
           "endOffset": 40010,
           "startOffset": 39991
          },
          {
           "count": 0,
           "endOffset": 40187,
           "startOffset": 40012
          },
          {
           "count": 19,
           "endOffset": 40324,
           "startOffset": 40187
          },
          {
           "count": 427,
           "endOffset": 42868,
           "startOffset": 40324
          },
          {
           "count": 34,
           "endOffset": 40551,
           "startOffset": 40436
          },
          {
           "count": 393,
           "endOffset": 40677,
           "startOffset": 40551
          },
          {
           "count": 187,
           "endOffset": 40798,
           "startOffset": 40760
          },
          {
           "count": 28,
           "endOffset": 40797,
           "startOffset": 40770
          },
          {
           "count": 257,
           "endOffset": 40937,
           "startOffset": 40800
          },
          {
           "count": 0,
           "endOffset": 40915,
           "startOffset": 40891
          },
          {
           "count": 170,
           "endOffset": 40999,
           "startOffset": 40937
          },
          {
           "count": 11,
           "endOffset": 41017,
           "startOffset": 40999
          },
          {
           "count": 0,
           "endOffset": 41097,
           "startOffset": 41048
          },
          {
           "count": 170,
           "endOffset": 42382,
           "startOffset": 41097
          },
          {
           "count": 135,
           "endOffset": 41551,
           "startOffset": 41450
          },
          {
           "count": 11,
           "endOffset": 41525,
           "startOffset": 41503
          },
          {
           "count": 35,
           "endOffset": 41932,
           "startOffset": 41551
          },
          {
           "count": 13,
           "endOffset": 41924,
           "startOffset": 41875
          },
          {
           "count": 35,
           "endOffset": 41964,
           "startOffset": 41932
          },
          {
           "count": 22,
           "endOffset": 42214,
           "startOffset": 41964
          },
          {
           "count": 34,
           "endOffset": 42296,
           "startOffset": 42214
          },
          {
           "count": 0,
           "endOffset": 42326,
           "startOffset": 42296
          },
          {
           "count": 34,
           "endOffset": 42376,
           "startOffset": 42326
          },
          {
           "count": 34,
           "endOffset": 42658,
           "startOffset": 42382
          },
          {
           "count": 0,
           "endOffset": 42677,
           "startOffset": 42658
          },
          {
           "count": 0,
           "endOffset": 42864,
           "startOffset": 42679
          },
          {
           "count": 18,
           "endOffset": 42883,
           "startOffset": 42868
          },
          {
           "count": 4,
           "endOffset": 42906,
           "startOffset": 42883
          },
          {
           "count": 18,
           "endOffset": 42950,
           "startOffset": 42906
          }
         ]
        }
       ],
       "scriptId": "48",
       "url": "fs.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "realpathSync",
         "isBlockCoverage": false,
         "ranges": [
          {
           "count": 3,
           "endOffset": 42951,
           "startOffset": 39013
          }
         ]
        }
       ],
       "scriptId": "48",
       "url": "fs.js"
      }
     ]
    }
   ],
   "name": "Issue 2: Mixed isBlockCoverage (https://github.com/demurgos/v8-coverage/issues/2)",
   "status": "run"
  }
 ],
 "test_coverage_merge_node_10_internal_errors_one_of_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 2516,
          "endOffset": 148556,
          "startOffset": 147273
         },
         {
          "count": 719,
          "endOffset": 148437,
          "startOffset": 147492
         },
         {
          "count": 718,
          "endOffset": 148299,
          "startOffset": 147892
         },
         {
          "count": 537,
          "endOffset": 148155,
          "startOffset": 147892
         },
         {
          "count": 530,
          "endOffset": 148061,
          "startOffset": 147892
         },
         {
          "count": 2,
          "endOffset": 148061,
          "startOffset": 148055
         },
         {
          "count": 2,
          "endOffset": 148155,
          "startOffset": 148061
         },
         {
          "count": 188,
          "endOffset": 148299,
          "startOffset": 148155
         },
         {
          "count": 2,
          "endOffset": 148299,
          "startOffset": 148291
         },
         {
          "count": 38,
          "endOffset": 148437,
          "startOffset": 148299
         },
         {
          "count": 5,
          "endOffset": 148433,
          "startOffset": 148299
         },
         {
          "count": 4,
          "endOffset": 148427,
          "startOffset": 148299
         },
         {
          "count": 2,
          "endOffset": 148433,
          "startOffset": 148427
         },
         {
          "count": 2,
          "endOffset": 148437,
          "startOffset": 148433
         },
         {
          "count": 2019,
          "endOffset": 148555,
          "startOffset": 148437
         },
         {
          "count": 1799,
          "endOffset": 148554,
          "startOffset": 148437
         },
         {
          "count": 2,
          "endOffset": 148555,
          "startOffset": 148554
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 2,
           "endOffset": 148556,
           "startOffset": 147273
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1453,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 5,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 4,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 1,
           "endOffset": 148061,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148061,
           "startOffset": 148055
          },
          {
           "count": 2,
           "endOffset": 148433,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 148061
          },
          {
           "count": 1,
           "endOffset": 148299,
           "startOffset": 148155
          },
          {
           "count": 0,
           "endOffset": 148299,
           "startOffset": 148291
          },
          {
           "count": 1,
           "endOffset": 148427,
           "startOffset": 148299
          },
          {
           "count": 0,
           "endOffset": 148433,
           "startOffset": 148427
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148433
          },
          {
           "count": 1,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 28,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 2,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 1,
           "endOffset": 148061,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148061,
           "startOffset": 148055
          },
          {
           "count": 1,
           "endOffset": 148433,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148433,
           "startOffset": 148291
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148433
          },
          {
           "count": 26,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 2,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 1,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 0,
           "endOffset": 148299,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148427
          },
          {
           "count": 1,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 173,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 33,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148291
          },
          {
           "count": 140,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 313,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 154,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148055
          },
          {
           "count": 159,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 43,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 26,
           "endOffset": 148437,
           "startOffset": 147492
          },
          {
           "count": 24,
           "endOffset": 148061,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148061,
           "startOffset": 148055
          },
          {
           "count": 2,
           "endOffset": 148433,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148433,
           "startOffset": 148291
          },
          {
           "count": 0,
           "endOffset": 148437,
           "startOffset": 148433
          },
          {
           "count": 17,
           "endOffset": 148554,
           "startOffset": 148437
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148554
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 148,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148291
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 3,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 2,
           "endOffset": 148061,
           "startOffset": 147892
          },
          {
           "count": 0,
           "endOffset": 148061,
           "startOffset": 148055
          },
          {
           "count": 1,
           "endOffset": 148433,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148155,
           "startOffset": 148061
          },
          {
           "count": 0,
           "endOffset": 148433,
           "startOffset": 148291
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148433
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 346,
           "endOffset": 148556,
           "startOffset": 147273
          },
          {
           "count": 0,
           "endOffset": 148555,
           "startOffset": 148055
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "node@10.11.0: internal/errors.js#oneOf",
   "status": "run"
  }
 ],
 "test_coverage_merge_reduced_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 1962,
          "endOffset": 8,
          "startOffset": 0
         },
         {
          "count": 332,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 331,
          "endOffset": 4,
          "startOffset": 2
         },
         {
          "count": 329,
          "endOffset": 4,
          "startOffset": 3
         },
         {
          "count": 30,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 4,
          "endOffset": 5,
          "startOffset": 4
         },
         {
          "count": 29,
          "endOffset": 6,
          "startOffset": 5
         },
         {
          "count": 1814,
          "endOffset": 7,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1811,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 181,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 180,
           "endOffset": 4,
           "startOffset": 2
          },
          {
           "count": 27,
           "endOffset": 6,
           "startOffset": 4
          },
          {
           "count": 3,
           "endOffset": 5,
           "startOffset": 4
          },
          {
           "count": 26,
           "endOffset": 6,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 148,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 0,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 3,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "node@10.11.0: internal/errors.js#oneOf: reduced",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 1962,
          "endOffset": 8,
          "startOffset": 0
         },
         {
          "count": 332,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 331,
          "endOffset": 4,
          "startOffset": 2
         },
         {
          "count": 329,
          "endOffset": 4,
          "startOffset": 3
         },
         {
          "count": 30,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 4,
          "endOffset": 5,
          "startOffset": 4
         },
         {
          "count": 29,
          "endOffset": 6,
          "startOffset": 5
         },
         {
          "count": 1814,
          "endOffset": 7,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1811,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 181,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 180,
           "endOffset": 4,
           "startOffset": 2
          },
          {
           "count": 27,
           "endOffset": 6,
           "startOffset": 4
          },
          {
           "count": 3,
           "endOffset": 5,
           "startOffset": 4
          },
          {
           "count": 26,
           "endOffset": 6,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 148,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 0,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 3,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 3,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "node@10.11.0: internal/errors.js#oneOf: reduced with hint",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 8,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 66,
          "endOffset": 4,
          "startOffset": 2
         },
         {
          "count": 30,
          "endOffset": 4,
          "startOffset": 3
         },
         {
          "count": 43,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 4
         },
         {
          "count": 52,
          "endOffset": 7,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 6,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "node@10.11.0: internal/errors.js#oneOf: minimal",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 8,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 66,
          "endOffset": 4,
          "startOffset": 2
         },
         {
          "count": 30,
          "endOffset": 4,
          "startOffset": 3
         },
         {
          "count": 43,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 4
         },
         {
          "count": 52,
          "endOffset": 7,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 6,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 8,
           "startOffset": 0
          },
          {
           "count": 40,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "node@10.11.0: internal/errors.js#oneOf: minimal with hint",
   "status": "run"
  }
 ],
 "test_coverage_merge_simple_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "No children",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "One child",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Equal",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 3,
          "startOffset": 1
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 3,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (BeforeAdjacent)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 2,
          "startOffset": 1
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 2,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (BeforeStrict)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 12,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 6
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (AfterAdjacent)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 12,
          "endOffset": 8,
          "startOffset": 7
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 7
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (AfterStrict)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 8,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (OverlapStrict)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 6,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (OverlapEqualEnd)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 8,
          "startOffset": 3
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (OverlapEqualStart)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 3,
          "endOffset": 5,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (ContainedEqualStart)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 6,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (ContainedEqualEnd)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 3,
          "endOffset": 5,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Nested (ContainedStrict)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Partial overlap (PartialOverlapStart)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 3,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 12,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Partial overlap (PartialOverlapEnd)",
   "status": "run"
  }
 ],
 "test_coverage_merge_various_test.json": [
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three empty trees",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 3,
          "endOffset": 3,
          "startOffset": 0
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 3,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 3,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Equal children, same startOffset as parents",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 3,
          "endOffset": 9,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 9,
           "startOffset": 6
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 9,
           "startOffset": 6
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Equal children, same endOffset as parents",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 3,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 9,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 3,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 9,
           "startOffset": 6
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (strict) children, offsets matching parents (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 3,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 9,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 9,
           "startOffset": 6
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 3,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (strict) children, offsets matching parents (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 4,
          "startOffset": 1
         },
         {
          "count": 12,
          "endOffset": 7,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (adjacent) children (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 4,
          "startOffset": 1
         },
         {
          "count": 12,
          "endOffset": 7,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 7,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Disjoint (adjacent) children (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 7,
          "endOffset": 5,
          "startOffset": 3
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 2 left & 1 right (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 0)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 1)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 2)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 3)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 4)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 70,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 61,
          "endOffset": 6,
          "startOffset": 3
         },
         {
          "count": 7,
          "endOffset": 6,
          "startOffset": 4
         },
         {
          "count": 16,
          "endOffset": 8,
          "startOffset": 6
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 40,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 8,
           "startOffset": 4
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Three trees: Partial overlap: 1 left & 2 right (permutation 5)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 5,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 13,
          "endOffset": 8,
          "startOffset": 1
         },
         {
          "count": 10,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 9,
          "endOffset": 8,
          "startOffset": 5
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 6,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 3,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 4,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 7,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 3,
           "endOffset": 8,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Normalization: two trees with complementary children (not summing to the same count)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 5,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 14,
          "endOffset": 8,
          "startOffset": 1
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 6,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 5,
           "endOffset": 5,
           "startOffset": 1
          },
          {
           "count": 7,
           "endOffset": 8,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 4,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 8,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 9,
           "endOffset": 5,
           "startOffset": 1
          },
          {
           "count": 7,
           "endOffset": 8,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Normalization: two trees with complementary children (summing to the same count, same as parent)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 5,
          "endOffset": 9,
          "startOffset": 0
         },
         {
          "count": 10,
          "endOffset": 8,
          "startOffset": 1
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 6,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 3,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 4,
           "endOffset": 9,
           "startOffset": 0
          },
          {
           "count": 7,
           "endOffset": 8,
           "startOffset": 1
          },
          {
           "count": 4,
           "endOffset": 8,
           "startOffset": 5
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "Normalization: two trees with complementary children (summing to the same count, different from parent)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 11,
          "endOffset": 5,
          "startOffset": 0
         },
         {
          "count": 2,
          "endOffset": 4,
          "startOffset": 1
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: a+b",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 11,
          "endOffset": 5,
          "startOffset": 0
         },
         {
          "count": 2,
          "endOffset": 4,
          "startOffset": 1
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: b+a",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 11,
          "endOffset": 6,
          "startOffset": 0
         },
         {
          "count": 2,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: a+c",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 20,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 11,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 2,
          "endOffset": 5,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: b+c",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 11,
           "endOffset": 5,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 4,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: (a+b)+c",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 11,
           "endOffset": 6,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 4,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: (a+c)+b",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 11,
           "endOffset": 6,
           "startOffset": 1
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: a+(b+c)",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 6,
          "startOffset": 0
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 1
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 2
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: a+b+c",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "count": 40,
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 31,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 22,
          "endOffset": 6,
          "startOffset": 1
         },
         {
          "count": 13,
          "endOffset": 5,
          "startOffset": 2
         },
         {
          "count": 4,
          "endOffset": 4,
          "startOffset": 3
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 6,
           "startOffset": 2
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 7,
           "startOffset": 3
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a similar sliding chain: a+b+c+d",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 4,
          "startOffset": 0
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 1
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a tagged sliding chain: a+b",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 30,
          "endOffset": 7,
          "startOffset": 0
         },
         {
          "count": 21,
          "endOffset": 4,
          "startOffset": 0
         },
         {
          "count": 3,
          "endOffset": 4,
          "startOffset": 1
         },
         {
          "count": 12,
          "endOffset": 5,
          "startOffset": 4
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 20,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 5,
           "startOffset": 1
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 7,
           "startOffset": 0
          },
          {
           "count": 1,
           "endOffset": 4,
           "startOffset": 0
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges a tagged sliding chain: a+b",
   "status": "run"
  },
  {
   "expected": {
    "result": [
     {
      "functions": [
       {
        "functionName": "test",
        "isBlockCoverage": true,
        "ranges": [
         {
          "count": 15,
          "endOffset": 16,
          "startOffset": 0
         },
         {
          "count": 20,
          "endOffset": 4,
          "startOffset": 0
         },
         {
          "count": 18,
          "endOffset": 1,
          "startOffset": 0
         },
         {
          "count": 16,
          "endOffset": 2,
          "startOffset": 1
         },
         {
          "count": 17,
          "endOffset": 4,
          "startOffset": 3
         },
         {
          "count": 12,
          "endOffset": 11,
          "startOffset": 4
         },
         {
          "count": 13,
          "endOffset": 8,
          "startOffset": 5
         },
         {
          "count": 16,
          "endOffset": 7,
          "startOffset": 6
         },
         {
          "count": 9,
          "endOffset": 8,
          "startOffset": 7
         },
         {
          "count": 11,
          "endOffset": 11,
          "startOffset": 9
         },
         {
          "count": 19,
          "endOffset": 11,
          "startOffset": 10
         },
         {
          "count": 23,
          "endOffset": 15,
          "startOffset": 11
         },
         {
          "count": 22,
          "endOffset": 12,
          "startOffset": 11
         },
         {
          "count": 16,
          "endOffset": 14,
          "startOffset": 13
         }
        ]
       }
      ],
      "scriptId": "0",
      "url": "/lib.js"
     }
    ]
   },
   "inputs": [
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 1,
           "endOffset": 16,
           "startOffset": 0
          },
          {
           "count": 6,
           "endOffset": 4,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 2,
           "startOffset": 1
          },
          {
           "count": 4,
           "endOffset": 7,
           "startOffset": 6
          },
          {
           "count": 9,
           "endOffset": 15,
           "startOffset": 10
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 4,
           "endOffset": 16,
           "startOffset": 0
          },
          {
           "count": 2,
           "endOffset": 1,
           "startOffset": 0
          },
          {
           "count": 5,
           "endOffset": 8,
           "startOffset": 5
          },
          {
           "count": 3,
           "endOffset": 12,
           "startOffset": 9
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    },
    {
     "result": [
      {
       "functions": [
        {
         "functionName": "test",
         "isBlockCoverage": true,
         "ranges": [
          {
           "count": 10,
           "endOffset": 16,
           "startOffset": 0
          },
          {
           "count": 7,
           "endOffset": 11,
           "startOffset": 3
          },
          {
           "count": 3,
           "endOffset": 8,
           "startOffset": 7
          },
          {
           "count": 3,
           "endOffset": 14,
           "startOffset": 13
          }
         ]
        }
       ],
       "scriptId": "0",
       "url": "/lib.js"
      }
     ]
    }
   ],
   "name": "merges three trees with a complex relation (chains, nesting)",
   "status": "run"
  }
 ],
 "test_v8_coverage_node_sqlite_13216_1633662333140_0.json": {
  "result": [
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 3134,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "encodeStr",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 3065,
        "startOffset": 1374
       }
      ]
     }
    ],
    "scriptId": "32",
    "url": "internal/querystring.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 44873,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "isPathSeparator",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2111,
        "endOffset": 1635,
        "startOffset": 1529
       },
       {
        "count": 2108,
        "endOffset": 1631,
        "startOffset": 1600
       }
      ]
     },
     {
      "functionName": "isPosixPathSeparator",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1718,
        "startOffset": 1639
       }
      ]
     },
     {
      "functionName": "isWindowsDeviceRoot",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 86,
        "endOffset": 1895,
        "startOffset": 1722
       },
       {
        "count": 81,
        "endOffset": 1822,
        "startOffset": 1795
       },
       {
        "count": 14,
        "endOffset": 1891,
        "startOffset": 1824
       },
       {
        "count": 9,
        "endOffset": 1890,
        "startOffset": 1863
       }
      ]
     },
     {
      "functionName": "normalizeString",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 41,
        "endOffset": 3826,
        "startOffset": 1961
       },
       {
        "count": 1915,
        "endOffset": 3808,
        "startOffset": 2184
       },
       {
        "count": 1874,
        "endOffset": 2245,
        "startOffset": 2219
       },
       {
        "count": 41,
        "endOffset": 2340,
        "startOffset": 2245
       },
       {
        "count": 40,
        "endOffset": 2296,
        "startOffset": 2290
       },
       {
        "count": 1,
        "endOffset": 2340,
        "startOffset": 2296
       },
       {
        "count": 1875,
        "endOffset": 2375,
        "startOffset": 2340
       },
       {
        "count": 209,
        "endOffset": 3704,
        "startOffset": 2375
       },
       {
        "count": 200,
        "endOffset": 2421,
        "startOffset": 2408
       },
       {
        "count": 10,
        "endOffset": 2450,
        "startOffset": 2423
       },
       {
        "count": 199,
        "endOffset": 3658,
        "startOffset": 2450
       },
       {
        "count": 2,
        "endOffset": 3439,
        "startOffset": 2472
       },
       {
        "count": 0,
        "endOffset": 2588,
        "startOffset": 2529
       },
       {
        "count": 0,
        "endOffset": 2648,
        "startOffset": 2589
       },
       {
        "count": 0,
        "endOffset": 2868,
        "startOffset": 2789
       },
       {
        "count": 0,
        "endOffset": 3283,
        "startOffset": 3108
       },
       {
        "count": 0,
        "endOffset": 3430,
        "startOffset": 3294
       },
       {
        "count": 197,
        "endOffset": 3658,
        "startOffset": 3439
       },
       {
        "count": 158,
        "endOffset": 3540,
        "startOffset": 3487
       },
       {
        "count": 39,
        "endOffset": 3601,
        "startOffset": 3540
       },
       {
        "count": 207,
        "endOffset": 3704,
        "startOffset": 3658
       },
       {
        "count": 1666,
        "endOffset": 3803,
        "startOffset": 3704
       },
       {
        "count": 24,
        "endOffset": 3746,
        "startOffset": 3732
       },
       {
        "count": 9,
        "endOffset": 3771,
        "startOffset": 3748
       },
       {
        "count": 1657,
        "endOffset": 3803,
        "startOffset": 3771
       }
      ]
     },
     {
      "functionName": "_format",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4453,
        "startOffset": 4017
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 40,
        "endOffset": 9115,
        "startOffset": 4579
       },
       {
        "count": 53,
        "endOffset": 8648,
        "startOffset": 4742
       },
       {
        "count": 52,
        "endOffset": 4953,
        "startOffset": 4780
       },
       {
        "count": 0,
        "endOffset": 4944,
        "startOffset": 4911
       },
       {
        "count": 1,
        "endOffset": 5845,
        "startOffset": 4953
       },
       {
        "count": 0,
        "endOffset": 5845,
        "startOffset": 5033
       },
       {
        "count": 0,
        "endOffset": 6218,
        "startOffset": 6053
       },
       {
        "count": 0,
        "endOffset": 7598,
        "startOffset": 6251
       },
       {
        "count": 49,
        "endOffset": 7689,
        "startOffset": 7634
       },
       {
        "count": 40,
        "endOffset": 8015,
        "startOffset": 7691
       },
       {
        "count": 40,
        "endOffset": 8333,
        "startOffset": 8048
       },
       {
        "count": 0,
        "endOffset": 8270,
        "startOffset": 8090
       },
       {
        "count": 0,
        "endOffset": 8433,
        "startOffset": 8365
       },
       {
        "count": 40,
        "endOffset": 8600,
        "startOffset": 8572
       },
       {
        "count": 40,
        "endOffset": 8632,
        "startOffset": 8602
       },
       {
        "count": 0,
        "endOffset": 9109,
        "startOffset": 9059
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1,
        "endOffset": 12023,
        "startOffset": 9187
       },
       {
        "count": 0,
        "endOffset": 9308,
        "startOffset": 9297
       },
       {
        "count": 0,
        "endOffset": 9622,
        "startOffset": 9465
       },
       {
        "count": 0,
        "endOffset": 11204,
        "startOffset": 9655
       },
       {
        "count": 0,
        "endOffset": 11708,
        "startOffset": 11697
       },
       {
        "count": 0,
        "endOffset": 11751,
        "startOffset": 11737
       },
       {
        "count": 0,
        "endOffset": 11771,
        "startOffset": 11760
       },
       {
        "count": 0,
        "endOffset": 11863,
        "startOffset": 11850
       },
       {
        "count": 0,
        "endOffset": 11950,
        "startOffset": 11895
       },
       {
        "count": 0,
        "endOffset": 12017,
        "startOffset": 11997
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 5,
        "endOffset": 12477,
        "startOffset": 12096
       },
       {
        "count": 0,
        "endOffset": 12220,
        "startOffset": 12207
       },
       {
        "count": 4,
        "endOffset": 12424,
        "startOffset": 12381
       },
       {
        "count": 4,
        "endOffset": 12470,
        "startOffset": 12425
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1,
        "endOffset": 14671,
        "startOffset": 12552
       },
       {
        "count": 0,
        "endOffset": 12614,
        "startOffset": 12603
       },
       {
        "count": 2,
        "endOffset": 12926,
        "startOffset": 12697
       },
       {
        "count": 1,
        "endOffset": 12910,
        "startOffset": 12838
       },
       {
        "count": 0,
        "endOffset": 12978,
        "startOffset": 12967
       },
       {
        "count": 0,
        "endOffset": 14271,
        "startOffset": 13851
       },
       {
        "count": 0,
        "endOffset": 14499,
        "startOffset": 14466
       },
       {
        "count": 0,
        "endOffset": 14620,
        "startOffset": 14579
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 18564,
        "startOffset": 14979
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 18,
        "endOffset": 19630,
        "startOffset": 18571
       },
       {
        "count": 0,
        "endOffset": 18702,
        "startOffset": 18690
       },
       {
        "count": 0,
        "endOffset": 18759,
        "startOffset": 18733
       },
       {
        "count": 0,
        "endOffset": 18865,
        "startOffset": 18853
       },
       {
        "count": 0,
        "endOffset": 19300,
        "startOffset": 18929
       },
       {
        "count": 0,
        "endOffset": 19629,
        "startOffset": 19605
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 7,
        "endOffset": 22114,
        "startOffset": 19702
       },
       {
        "count": 0,
        "endOffset": 19821,
        "startOffset": 19810
       },
       {
        "count": 0,
        "endOffset": 20090,
        "startOffset": 19926
       },
       {
        "count": 0,
        "endOffset": 21455,
        "startOffset": 20153
       },
       {
        "count": 0,
        "endOffset": 21602,
        "startOffset": 21599
       },
       {
        "count": 57,
        "endOffset": 21973,
        "startOffset": 21732
       },
       {
        "count": 7,
        "endOffset": 21871,
        "startOffset": 21782
       },
       {
        "count": 50,
        "endOffset": 21966,
        "startOffset": 21871
       },
       {
        "count": 0,
        "endOffset": 22077,
        "startOffset": 21997
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2,
        "endOffset": 24930,
        "startOffset": 22214
       },
       {
        "count": 0,
        "endOffset": 22298,
        "startOffset": 22271
       },
       {
        "count": 0,
        "endOffset": 22778,
        "startOffset": 22761
       },
       {
        "count": 0,
        "endOffset": 22807,
        "startOffset": 22779
       },
       {
        "count": 0,
        "endOffset": 24318,
        "startOffset": 22809
       },
       {
        "count": 17,
        "endOffset": 24848,
        "startOffset": 24371
       },
       {
        "count": 2,
        "endOffset": 24652,
        "startOffset": 24421
       },
       {
        "count": 15,
        "endOffset": 24841,
        "startOffset": 24652
       },
       {
        "count": 2,
        "endOffset": 24841,
        "startOffset": 24674
       },
       {
        "count": 0,
        "endOffset": 24889,
        "startOffset": 24879
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 27073,
        "startOffset": 25002
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 31903,
        "startOffset": 27291
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33025,
        "startOffset": 32100
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33694,
        "startOffset": 33097
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33899,
        "startOffset": 33767
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 34405,
        "startOffset": 33974
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36780,
        "startOffset": 34502
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36866,
        "startOffset": 36787
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 37590,
        "startOffset": 36938
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 40083,
        "startOffset": 37690
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 41863,
        "startOffset": 40155
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 44518,
        "startOffset": 42086
       }
      ]
     }
    ],
    "scriptId": "33",
    "url": "path.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 16488,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "lazyBuffer",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1119,
        "startOffset": 1006
       }
      ]
     },
     {
      "functionName": "validateEncoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1251,
        "startOffset": 1123
       }
      ]
     },
     {
      "functionName": "validateDecoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1383,
        "startOffset": 1255
       }
      ]
     },
     {
      "functionName": "validateArgument",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1601,
        "startOffset": 1387
       }
      ]
     },
     {
      "functionName": "trimAsciiWhitespace",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9068,
        "startOffset": 8566
       }
      ]
     },
     {
      "functionName": "getEncodingFromLabel",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9255,
        "startOffset": 9072
       }
      ]
     },
     {
      "functionName": "TextEncoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9379,
        "startOffset": 9331
       }
      ]
     },
     {
      "functionName": "get encoding",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9455,
        "startOffset": 9385
       }
      ]
     },
     {
      "functionName": "encode",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9556,
        "startOffset": 9461
       }
      ]
     },
     {
      "functionName": "encodeInto",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9879,
        "startOffset": 9562
       }
      ]
     },
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 10291,
        "startOffset": 9885
       }
      ]
     },
     {
      "functionName": "makeTextDecoderICU",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1,
        "endOffset": 12397,
        "startOffset": 10680
       }
      ]
     },
     {
      "functionName": "TextDecoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 11574,
        "startOffset": 10825
       }
      ]
     },
     {
      "functionName": "decode",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 12364,
        "startOffset": 11584
       }
      ]
     },
     {
      "functionName": "makeTextDecoderJS",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15025,
        "startOffset": 12401
       }
      ]
     },
     {
      "functionName": "get encoding",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15240,
        "startOffset": 15156
       }
      ]
     },
     {
      "functionName": "get fatal",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15379,
        "startOffset": 15249
       }
      ]
     },
     {
      "functionName": "get ignoreBOM",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15547,
        "startOffset": 15388
       }
      ]
     },
     {
      "functionName": "ObjectGetOwnPropertyDescriptors",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 16186,
        "startOffset": 15556
       }
      ]
     }
    ],
    "scriptId": "34",
    "url": "internal/encoding.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 8643,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1882,
        "startOffset": 1855
       }
      ]
     },
     {
      "functionName": "unenroll",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 3615,
        "startOffset": 2396
       }
      ]
     },
     {
      "functionName": "enroll",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4089,
        "startOffset": 3827
       }
      ]
     },
     {
      "functionName": "setTimeout",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4800,
        "startOffset": 4127
       }
      ]
     },
     {
      "functionName": "get",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 5019,
        "startOffset": 4881
       }
      ]
     },
     {
      "functionName": "clearTimeout",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 5407,
        "startOffset": 5028
       }
      ]
     },
     {
      "functionName": "setInterval",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6086,
        "startOffset": 5411
       }
      ]
     },
     {
      "functionName": "clearInterval",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6393,
        "startOffset": 6090
       }
      ]
     },
     {
      "functionName": "Timeout.close",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6477,
        "startOffset": 6423
       }
      ]
     },
     {
      "functionName": "Timeout.<computed>",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6689,
        "startOffset": 6521
       }
      ]
     },
     {
      "functionName": "setImmediate",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7259,
        "startOffset": 6694
       }
      ]
     },
     {
      "functionName": "get",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7482,
        "startOffset": 7342
       }
      ]
     },
     {
      "functionName": "clearImmediate",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7977,
        "startOffset": 7493
       }
      ]
     }
    ],
    "scriptId": "35",
    "url": "timers.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 1166,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "init",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 93,
        "startOffset": 17
       }
      ]
     },
     {
      "functionName": "peek",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 221,
        "startOffset": 126
       }
      ]
     },
     {
      "functionName": "remove",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 497,
        "startOffset": 259
       }
      ]
     },
     {
      "functionName": "append",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1021,
        "startOffset": 556
       }
      ]
     },
     {
      "functionName": "isEmpty",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1087,
        "startOffset": 1025
       }
      ]
     }
    ],
    "scriptId": "36",
    "url": "internal/linkedlist.js"
   }
  ],
  "timestamp": 967709.209879
 },
 "test_v8_coverage_node_sqlite_9884_1633662346346_0.json": {
  "result": [
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 3134,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "encodeStr",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 3065,
        "startOffset": 1374
       }
      ]
     }
    ],
    "scriptId": "32",
    "url": "internal/querystring.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 44873,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "isPathSeparator",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 144876,
        "endOffset": 1635,
        "startOffset": 1529
       },
       {
        "count": 144646,
        "endOffset": 1631,
        "startOffset": 1600
       }
      ]
     },
     {
      "functionName": "isPosixPathSeparator",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1718,
        "startOffset": 1639
       }
      ]
     },
     {
      "functionName": "isWindowsDeviceRoot",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 5087,
        "endOffset": 1895,
        "startOffset": 1722
       },
       {
        "count": 4801,
        "endOffset": 1822,
        "startOffset": 1795
       },
       {
        "count": 1027,
        "endOffset": 1891,
        "startOffset": 1824
       },
       {
        "count": 741,
        "endOffset": 1890,
        "startOffset": 1863
       }
      ]
     },
     {
      "functionName": "normalizeString",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2284,
        "endOffset": 3826,
        "startOffset": 1961
       },
       {
        "count": 131113,
        "endOffset": 3808,
        "startOffset": 2184
       },
       {
        "count": 128829,
        "endOffset": 2245,
        "startOffset": 2219
       },
       {
        "count": 2284,
        "endOffset": 2340,
        "startOffset": 2245
       },
       {
        "count": 2279,
        "endOffset": 2296,
        "startOffset": 2290
       },
       {
        "count": 5,
        "endOffset": 2340,
        "startOffset": 2296
       },
       {
        "count": 128834,
        "endOffset": 2375,
        "startOffset": 2340
       },
       {
        "count": 12268,
        "endOffset": 3704,
        "startOffset": 2375
       },
       {
        "count": 11644,
        "endOffset": 2421,
        "startOffset": 2408
       },
       {
        "count": 724,
        "endOffset": 2450,
        "startOffset": 2423
       },
       {
        "count": 11544,
        "endOffset": 3658,
        "startOffset": 2450
       },
       {
        "count": 31,
        "endOffset": 3439,
        "startOffset": 2472
       },
       {
        "count": 0,
        "endOffset": 2588,
        "startOffset": 2529
       },
       {
        "count": 0,
        "endOffset": 2648,
        "startOffset": 2589
       },
       {
        "count": 0,
        "endOffset": 2868,
        "startOffset": 2789
       },
       {
        "count": 0,
        "endOffset": 3283,
        "startOffset": 3108
       },
       {
        "count": 0,
        "endOffset": 3430,
        "startOffset": 3294
       },
       {
        "count": 11513,
        "endOffset": 3658,
        "startOffset": 3439
       },
       {
        "count": 9341,
        "endOffset": 3540,
        "startOffset": 3487
       },
       {
        "count": 2172,
        "endOffset": 3601,
        "startOffset": 3540
       },
       {
        "count": 12237,
        "endOffset": 3704,
        "startOffset": 3658
       },
       {
        "count": 116566,
        "endOffset": 3803,
        "startOffset": 3704
       },
       {
        "count": 1642,
        "endOffset": 3746,
        "startOffset": 3732
       },
       {
        "count": 165,
        "endOffset": 3771,
        "startOffset": 3748
       },
       {
        "count": 116401,
        "endOffset": 3803,
        "startOffset": 3771
       }
      ]
     },
     {
      "functionName": "_format",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4453,
        "startOffset": 4017
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2279,
        "endOffset": 9115,
        "startOffset": 4579
       },
       {
        "count": 3106,
        "endOffset": 8648,
        "startOffset": 4742
       },
       {
        "count": 3105,
        "endOffset": 4953,
        "startOffset": 4780
       },
       {
        "count": 0,
        "endOffset": 4944,
        "startOffset": 4911
       },
       {
        "count": 1,
        "endOffset": 5845,
        "startOffset": 4953
       },
       {
        "count": 0,
        "endOffset": 5845,
        "startOffset": 5033
       },
       {
        "count": 0,
        "endOffset": 6218,
        "startOffset": 6053
       },
       {
        "count": 0,
        "endOffset": 7598,
        "startOffset": 6251
       },
       {
        "count": 2975,
        "endOffset": 7689,
        "startOffset": 7634
       },
       {
        "count": 2279,
        "endOffset": 8015,
        "startOffset": 7691
       },
       {
        "count": 2279,
        "endOffset": 8333,
        "startOffset": 8048
       },
       {
        "count": 0,
        "endOffset": 8270,
        "startOffset": 8090
       },
       {
        "count": 0,
        "endOffset": 8433,
        "startOffset": 8365
       },
       {
        "count": 2279,
        "endOffset": 8600,
        "startOffset": 8572
       },
       {
        "count": 2279,
        "endOffset": 8632,
        "startOffset": 8602
       },
       {
        "count": 0,
        "endOffset": 9109,
        "startOffset": 9059
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 5,
        "endOffset": 12023,
        "startOffset": 9187
       },
       {
        "count": 0,
        "endOffset": 9308,
        "startOffset": 9297
       },
       {
        "count": 0,
        "endOffset": 9622,
        "startOffset": 9465
       },
       {
        "count": 0,
        "endOffset": 11204,
        "startOffset": 9655
       },
       {
        "count": 4,
        "endOffset": 11582,
        "startOffset": 11278
       },
       {
        "count": 0,
        "endOffset": 11708,
        "startOffset": 11697
       },
       {
        "count": 0,
        "endOffset": 11751,
        "startOffset": 11737
       },
       {
        "count": 0,
        "endOffset": 11771,
        "startOffset": 11760
       },
       {
        "count": 0,
        "endOffset": 11863,
        "startOffset": 11850
       },
       {
        "count": 1,
        "endOffset": 11950,
        "startOffset": 11895
       },
       {
        "count": 0,
        "endOffset": 11935,
        "startOffset": 11922
       },
       {
        "count": 4,
        "endOffset": 11996,
        "startOffset": 11950
       },
       {
        "count": 0,
        "endOffset": 12017,
        "startOffset": 11997
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 312,
        "endOffset": 12477,
        "startOffset": 12096
       },
       {
        "count": 0,
        "endOffset": 12220,
        "startOffset": 12207
       },
       {
        "count": 311,
        "endOffset": 12380,
        "startOffset": 12345
       },
       {
        "count": 156,
        "endOffset": 12424,
        "startOffset": 12381
       },
       {
        "count": 112,
        "endOffset": 12470,
        "startOffset": 12425
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 5,
        "endOffset": 14671,
        "startOffset": 12552
       },
       {
        "count": 0,
        "endOffset": 12614,
        "startOffset": 12603
       },
       {
        "count": 11,
        "endOffset": 12926,
        "startOffset": 12697
       },
       {
        "count": 5,
        "endOffset": 12863,
        "startOffset": 12838
       },
       {
        "count": 6,
        "endOffset": 12910,
        "startOffset": 12863
       },
       {
        "count": 0,
        "endOffset": 12978,
        "startOffset": 12967
       },
       {
        "count": 0,
        "endOffset": 14271,
        "startOffset": 13851
       },
       {
        "count": 0,
        "endOffset": 14499,
        "startOffset": 14466
       },
       {
        "count": 0,
        "endOffset": 14620,
        "startOffset": 14579
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 18564,
        "startOffset": 14979
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1064,
        "endOffset": 19630,
        "startOffset": 18571
       },
       {
        "count": 0,
        "endOffset": 18702,
        "startOffset": 18690
       },
       {
        "count": 0,
        "endOffset": 18759,
        "startOffset": 18733
       },
       {
        "count": 0,
        "endOffset": 18865,
        "startOffset": 18853
       },
       {
        "count": 0,
        "endOffset": 19300,
        "startOffset": 18929
       },
       {
        "count": 0,
        "endOffset": 19629,
        "startOffset": 19605
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 489,
        "endOffset": 22114,
        "startOffset": 19702
       },
       {
        "count": 0,
        "endOffset": 19821,
        "startOffset": 19810
       },
       {
        "count": 0,
        "endOffset": 20090,
        "startOffset": 19926
       },
       {
        "count": 0,
        "endOffset": 21455,
        "startOffset": 20153
       },
       {
        "count": 0,
        "endOffset": 21602,
        "startOffset": 21599
       },
       {
        "count": 5638,
        "endOffset": 21973,
        "startOffset": 21732
       },
       {
        "count": 489,
        "endOffset": 21871,
        "startOffset": 21782
       },
       {
        "count": 5149,
        "endOffset": 21966,
        "startOffset": 21871
       },
       {
        "count": 0,
        "endOffset": 22077,
        "startOffset": 21997
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 112,
        "endOffset": 24930,
        "startOffset": 22214
       },
       {
        "count": 0,
        "endOffset": 22298,
        "startOffset": 22271
       },
       {
        "count": 0,
        "endOffset": 22778,
        "startOffset": 22761
       },
       {
        "count": 0,
        "endOffset": 22807,
        "startOffset": 22779
       },
       {
        "count": 0,
        "endOffset": 24318,
        "startOffset": 22809
       },
       {
        "count": 1309,
        "endOffset": 24848,
        "startOffset": 24371
       },
       {
        "count": 112,
        "endOffset": 24652,
        "startOffset": 24421
       },
       {
        "count": 1197,
        "endOffset": 24841,
        "startOffset": 24652
       },
       {
        "count": 112,
        "endOffset": 24841,
        "startOffset": 24674
       },
       {
        "count": 0,
        "endOffset": 24889,
        "startOffset": 24879
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 27073,
        "startOffset": 25002
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 31903,
        "startOffset": 27291
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33025,
        "startOffset": 32100
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33694,
        "startOffset": 33097
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33899,
        "startOffset": 33767
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 34405,
        "startOffset": 33974
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36780,
        "startOffset": 34502
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36866,
        "startOffset": 36787
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 37590,
        "startOffset": 36938
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 40083,
        "startOffset": 37690
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 41863,
        "startOffset": 40155
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 44518,
        "startOffset": 42086
       }
      ]
     }
    ],
    "scriptId": "33",
    "url": "path.js"
   }
  ],
  "timestamp": 967695.999409
 },
 "test_v8_coverage_node_sqlite_merged.json": {
  "result": [
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 16488,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "lazyBuffer",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1119,
        "startOffset": 1006
       }
      ]
     },
     {
      "functionName": "validateEncoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1251,
        "startOffset": 1123
       }
      ]
     },
     {
      "functionName": "validateDecoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1383,
        "startOffset": 1255
       }
      ]
     },
     {
      "functionName": "validateArgument",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1601,
        "startOffset": 1387
       }
      ]
     },
     {
      "functionName": "trimAsciiWhitespace",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9068,
        "startOffset": 8566
       }
      ]
     },
     {
      "functionName": "getEncodingFromLabel",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9255,
        "startOffset": 9072
       }
      ]
     },
     {
      "functionName": "TextEncoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9379,
        "startOffset": 9331
       }
      ]
     },
     {
      "functionName": "get encoding",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9455,
        "startOffset": 9385
       }
      ]
     },
     {
      "functionName": "encode",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9556,
        "startOffset": 9461
       }
      ]
     },
     {
      "functionName": "encodeInto",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 9879,
        "startOffset": 9562
       }
      ]
     },
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 10291,
        "startOffset": 9885
       }
      ]
     },
     {
      "functionName": "makeTextDecoderICU",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1,
        "endOffset": 12397,
        "startOffset": 10680
       }
      ]
     },
     {
      "functionName": "TextDecoder",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 11574,
        "startOffset": 10825
       }
      ]
     },
     {
      "functionName": "decode",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 12364,
        "startOffset": 11584
       }
      ]
     },
     {
      "functionName": "makeTextDecoderJS",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15025,
        "startOffset": 12401
       }
      ]
     },
     {
      "functionName": "get encoding",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15240,
        "startOffset": 15156
       }
      ]
     },
     {
      "functionName": "get fatal",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15379,
        "startOffset": 15249
       }
      ]
     },
     {
      "functionName": "get ignoreBOM",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 15547,
        "startOffset": 15388
       }
      ]
     },
     {
      "functionName": "ObjectGetOwnPropertyDescriptors",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 16186,
        "startOffset": 15556
       }
      ]
     }
    ],
    "scriptId": "0",
    "url": "internal/encoding.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 1166,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "init",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 93,
        "startOffset": 17
       }
      ]
     },
     {
      "functionName": "peek",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 221,
        "startOffset": 126
       }
      ]
     },
     {
      "functionName": "remove",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 497,
        "startOffset": 259
       }
      ]
     },
     {
      "functionName": "append",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1021,
        "startOffset": 556
       }
      ]
     },
     {
      "functionName": "isEmpty",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1087,
        "startOffset": 1025
       }
      ]
     }
    ],
    "scriptId": "1",
    "url": "internal/linkedlist.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 2,
        "endOffset": 3134,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "encodeStr",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 3065,
        "startOffset": 1374
       }
      ]
     }
    ],
    "scriptId": "2",
    "url": "internal/querystring.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 2,
        "endOffset": 44873,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "isPathSeparator",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 146987,
        "endOffset": 1635,
        "startOffset": 1529
       },
       {
        "count": 146754,
        "endOffset": 1631,
        "startOffset": 1600
       }
      ]
     },
     {
      "functionName": "isPosixPathSeparator",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1718,
        "startOffset": 1639
       }
      ]
     },
     {
      "functionName": "isWindowsDeviceRoot",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 5173,
        "endOffset": 1895,
        "startOffset": 1722
       },
       {
        "count": 4882,
        "endOffset": 1822,
        "startOffset": 1795
       },
       {
        "count": 1041,
        "endOffset": 1891,
        "startOffset": 1824
       },
       {
        "count": 750,
        "endOffset": 1890,
        "startOffset": 1863
       }
      ]
     },
     {
      "functionName": "normalizeString",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2325,
        "endOffset": 3826,
        "startOffset": 1961
       },
       {
        "count": 133028,
        "endOffset": 3808,
        "startOffset": 2184
       },
       {
        "count": 130703,
        "endOffset": 2245,
        "startOffset": 2219
       },
       {
        "count": 2325,
        "endOffset": 2340,
        "startOffset": 2245
       },
       {
        "count": 2319,
        "endOffset": 2296,
        "startOffset": 2290
       },
       {
        "count": 6,
        "endOffset": 2340,
        "startOffset": 2296
       },
       {
        "count": 130709,
        "endOffset": 2375,
        "startOffset": 2340
       },
       {
        "count": 12477,
        "endOffset": 3704,
        "startOffset": 2375
       },
       {
        "count": 11844,
        "endOffset": 2421,
        "startOffset": 2408
       },
       {
        "count": 734,
        "endOffset": 2450,
        "startOffset": 2423
       },
       {
        "count": 11743,
        "endOffset": 3658,
        "startOffset": 2450
       },
       {
        "count": 33,
        "endOffset": 3439,
        "startOffset": 2472
       },
       {
        "count": 0,
        "endOffset": 2588,
        "startOffset": 2529
       },
       {
        "count": 0,
        "endOffset": 2648,
        "startOffset": 2589
       },
       {
        "count": 0,
        "endOffset": 2868,
        "startOffset": 2789
       },
       {
        "count": 0,
        "endOffset": 3283,
        "startOffset": 3108
       },
       {
        "count": 0,
        "endOffset": 3430,
        "startOffset": 3294
       },
       {
        "count": 11710,
        "endOffset": 3658,
        "startOffset": 3439
       },
       {
        "count": 9499,
        "endOffset": 3540,
        "startOffset": 3487
       },
       {
        "count": 2211,
        "endOffset": 3601,
        "startOffset": 3540
       },
       {
        "count": 12444,
        "endOffset": 3704,
        "startOffset": 3658
       },
       {
        "count": 118232,
        "endOffset": 3803,
        "startOffset": 3704
       },
       {
        "count": 1666,
        "endOffset": 3746,
        "startOffset": 3732
       },
       {
        "count": 174,
        "endOffset": 3771,
        "startOffset": 3748
       },
       {
        "count": 118058,
        "endOffset": 3803,
        "startOffset": 3771
       }
      ]
     },
     {
      "functionName": "_format",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4453,
        "startOffset": 4017
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 2319,
        "endOffset": 9115,
        "startOffset": 4579
       },
       {
        "count": 3159,
        "endOffset": 8648,
        "startOffset": 4742
       },
       {
        "count": 3157,
        "endOffset": 4953,
        "startOffset": 4780
       },
       {
        "count": 0,
        "endOffset": 4944,
        "startOffset": 4911
       },
       {
        "count": 2,
        "endOffset": 5845,
        "startOffset": 4953
       },
       {
        "count": 0,
        "endOffset": 5845,
        "startOffset": 5033
       },
       {
        "count": 0,
        "endOffset": 6218,
        "startOffset": 6053
       },
       {
        "count": 0,
        "endOffset": 7598,
        "startOffset": 6251
       },
       {
        "count": 3024,
        "endOffset": 7689,
        "startOffset": 7634
       },
       {
        "count": 2319,
        "endOffset": 8015,
        "startOffset": 7691
       },
       {
        "count": 2319,
        "endOffset": 8333,
        "startOffset": 8048
       },
       {
        "count": 0,
        "endOffset": 8270,
        "startOffset": 8090
       },
       {
        "count": 0,
        "endOffset": 8433,
        "startOffset": 8365
       },
       {
        "count": 2319,
        "endOffset": 8600,
        "startOffset": 8572
       },
       {
        "count": 2319,
        "endOffset": 8632,
        "startOffset": 8602
       },
       {
        "count": 0,
        "endOffset": 9109,
        "startOffset": 9059
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 6,
        "endOffset": 12023,
        "startOffset": 9187
       },
       {
        "count": 0,
        "endOffset": 9308,
        "startOffset": 9297
       },
       {
        "count": 0,
        "endOffset": 9622,
        "startOffset": 9465
       },
       {
        "count": 0,
        "endOffset": 11204,
        "startOffset": 9655
       },
       {
        "count": 5,
        "endOffset": 11582,
        "startOffset": 11278
       },
       {
        "count": 0,
        "endOffset": 11708,
        "startOffset": 11697
       },
       {
        "count": 0,
        "endOffset": 11751,
        "startOffset": 11737
       },
       {
        "count": 0,
        "endOffset": 11771,
        "startOffset": 11760
       },
       {
        "count": 0,
        "endOffset": 11863,
        "startOffset": 11850
       },
       {
        "count": 1,
        "endOffset": 11950,
        "startOffset": 11895
       },
       {
        "count": 0,
        "endOffset": 11935,
        "startOffset": 11922
       },
       {
        "count": 5,
        "endOffset": 11996,
        "startOffset": 11950
       },
       {
        "count": 0,
        "endOffset": 12017,
        "startOffset": 11997
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 317,
        "endOffset": 12477,
        "startOffset": 12096
       },
       {
        "count": 0,
        "endOffset": 12220,
        "startOffset": 12207
       },
       {
        "count": 316,
        "endOffset": 12380,
        "startOffset": 12345
       },
       {
        "count": 160,
        "endOffset": 12424,
        "startOffset": 12381
       },
       {
        "count": 116,
        "endOffset": 12470,
        "startOffset": 12425
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 6,
        "endOffset": 14671,
        "startOffset": 12552
       },
       {
        "count": 0,
        "endOffset": 12614,
        "startOffset": 12603
       },
       {
        "count": 13,
        "endOffset": 12926,
        "startOffset": 12697
       },
       {
        "count": 12,
        "endOffset": 12910,
        "startOffset": 12838
       },
       {
        "count": 6,
        "endOffset": 12863,
        "startOffset": 12838
       },
       {
        "count": 7,
        "endOffset": 12910,
        "startOffset": 12863
       },
       {
        "count": 0,
        "endOffset": 12978,
        "startOffset": 12967
       },
       {
        "count": 0,
        "endOffset": 14271,
        "startOffset": 13851
       },
       {
        "count": 0,
        "endOffset": 14499,
        "startOffset": 14466
       },
       {
        "count": 0,
        "endOffset": 14620,
        "startOffset": 14579
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 18564,
        "startOffset": 14979
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 1082,
        "endOffset": 19630,
        "startOffset": 18571
       },
       {
        "count": 0,
        "endOffset": 18702,
        "startOffset": 18690
       },
       {
        "count": 0,
        "endOffset": 18759,
        "startOffset": 18733
       },
       {
        "count": 0,
        "endOffset": 18865,
        "startOffset": 18853
       },
       {
        "count": 0,
        "endOffset": 19300,
        "startOffset": 18929
       },
       {
        "count": 0,
        "endOffset": 19629,
        "startOffset": 19605
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 496,
        "endOffset": 22114,
        "startOffset": 19702
       },
       {
        "count": 0,
        "endOffset": 19821,
        "startOffset": 19810
       },
       {
        "count": 0,
        "endOffset": 20090,
        "startOffset": 19926
       },
       {
        "count": 0,
        "endOffset": 21455,
        "startOffset": 20153
       },
       {
        "count": 0,
        "endOffset": 21602,
        "startOffset": 21599
       },
       {
        "count": 5695,
        "endOffset": 21973,
        "startOffset": 21732
       },
       {
        "count": 496,
        "endOffset": 21871,
        "startOffset": 21782
       },
       {
        "count": 5199,
        "endOffset": 21966,
        "startOffset": 21871
       },
       {
        "count": 0,
        "endOffset": 22077,
        "startOffset": 21997
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": true,
      "ranges": [
       {
        "count": 114,
        "endOffset": 24930,
        "startOffset": 22214
       },
       {
        "count": 0,
        "endOffset": 22298,
        "startOffset": 22271
       },
       {
        "count": 0,
        "endOffset": 22778,
        "startOffset": 22761
       },
       {
        "count": 0,
        "endOffset": 22807,
        "startOffset": 22779
       },
       {
        "count": 0,
        "endOffset": 24318,
        "startOffset": 22809
       },
       {
        "count": 1326,
        "endOffset": 24848,
        "startOffset": 24371
       },
       {
        "count": 114,
        "endOffset": 24652,
        "startOffset": 24421
       },
       {
        "count": 1212,
        "endOffset": 24841,
        "startOffset": 24652
       },
       {
        "count": 114,
        "endOffset": 24841,
        "startOffset": 24674
       },
       {
        "count": 0,
        "endOffset": 24889,
        "startOffset": 24879
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 27073,
        "startOffset": 25002
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 31903,
        "startOffset": 27291
       }
      ]
     },
     {
      "functionName": "resolve",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33025,
        "startOffset": 32100
       }
      ]
     },
     {
      "functionName": "normalize",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33694,
        "startOffset": 33097
       }
      ]
     },
     {
      "functionName": "isAbsolute",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 33899,
        "startOffset": 33767
       }
      ]
     },
     {
      "functionName": "join",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 34405,
        "startOffset": 33974
       }
      ]
     },
     {
      "functionName": "relative",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36780,
        "startOffset": 34502
       }
      ]
     },
     {
      "functionName": "toNamespacedPath",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 36866,
        "startOffset": 36787
       }
      ]
     },
     {
      "functionName": "dirname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 37590,
        "startOffset": 36938
       }
      ]
     },
     {
      "functionName": "basename",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 40083,
        "startOffset": 37690
       }
      ]
     },
     {
      "functionName": "extname",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 41863,
        "startOffset": 40155
       }
      ]
     },
     {
      "functionName": "parse",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 44518,
        "startOffset": 42086
       }
      ]
     }
    ],
    "scriptId": "3",
    "url": "path.js"
   },
   {
    "functions": [
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 1,
        "endOffset": 8643,
        "startOffset": 0
       }
      ]
     },
     {
      "functionName": "",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 1882,
        "startOffset": 1855
       }
      ]
     },
     {
      "functionName": "unenroll",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 3615,
        "startOffset": 2396
       }
      ]
     },
     {
      "functionName": "enroll",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4089,
        "startOffset": 3827
       }
      ]
     },
     {
      "functionName": "setTimeout",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 4800,
        "startOffset": 4127
       }
      ]
     },
     {
      "functionName": "get",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 5019,
        "startOffset": 4881
       }
      ]
     },
     {
      "functionName": "clearTimeout",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 5407,
        "startOffset": 5028
       }
      ]
     },
     {
      "functionName": "setInterval",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6086,
        "startOffset": 5411
       }
      ]
     },
     {
      "functionName": "clearInterval",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6393,
        "startOffset": 6090
       }
      ]
     },
     {
      "functionName": "Timeout.close",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6477,
        "startOffset": 6423
       }
      ]
     },
     {
      "functionName": "Timeout.<computed>",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 6689,
        "startOffset": 6521
       }
      ]
     },
     {
      "functionName": "setImmediate",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7259,
        "startOffset": 6694
       }
      ]
     },
     {
      "functionName": "get",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7482,
        "startOffset": 7342
       }
      ]
     },
     {
      "functionName": "clearImmediate",
      "isBlockCoverage": false,
      "ranges": [
       {
        "count": 0,
        "endOffset": 7977,
        "startOffset": 7493
       }
      ]
     }
    ],
    "scriptId": "4",
    "url": "timers.js"
   }
  ]
 }
}
